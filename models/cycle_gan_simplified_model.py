import torch
import itertools
from util.image_pool import ImagePool
from .base_model import BaseModel
from . import networks


class CycleGANSimplifiedModel(BaseModel):
    """
    This class implements CycleGAN model, in a simplified way, also for learning image-to-image translation without paired data.

    It was based in this article: https://hardikbansal.github.io/CycleGANBlog/
    """

    def __init__(self, opt):
        """Initialize the CycleGANSimplifiedModel class.

        Parameters:
            opt (Option class)-- stores all the experiment flags
        """
        BaseModel.__init__(self, opt)

        # specify the training losses you want to print out.
        self.loss_names = ['D_A', 'G_A', 'cycle_A', 'idt_A', 'D_B', 'G_B', 'cycle_B', 'idt_B']

        # specify the images you want to save/display.
        visual_names_A = ['real_A', 'fake_B', 'rec_A', 'idt_B']
        visual_names_B = ['real_B', 'fake_A', 'rec_B', 'idt_A']
        self.visual_names = visual_names_A + visual_names_B

        # specify the models you want to save to the disk.
        self.model_names = ['G_A', 'G_B', 'D_A', 'D_B']

        # define networks (both Generators and discriminators)
        # The naming is different from those used in the paper.
        # Code (vs. paper): G_A (G), G_B (F), D_A (D_Y), D_B (D_X)
        self.netG_A = networks.define_generator_simplified(opt.input_nc, opt.output_nc, opt.ngf,
                                                           opt.init_type, opt.init_gain, self.gpu_ids)
        self.netG_B = networks.define_generator_simplified(opt.output_nc, opt.input_nc, opt.ngf,
                                                           opt.init_type, opt.init_gain, self.gpu_ids)
        self.netD_A = networks.define_discriminator_simplified(opt.output_nc, opt.ndf, opt.init_type,
                                                               opt.init_gain, self.gpu_ids)
        self.netD_B = networks.define_discriminator_simplified(opt.input_nc, opt.ndf, opt.init_type,
                                                               opt.init_gain, self.gpu_ids)

        # only works when input and output images have the same number of channels
        if opt.lambda_identity > 0.0:
            assert (opt.input_nc == opt.output_nc)

        # create image buffer to store previously generated images
        self.fake_A_pool = ImagePool(opt.pool_size)
        self.fake_B_pool = ImagePool(opt.pool_size)

        # define loss functions
        self.criterionGAN = torch.nn.MSELoss()
        self.criterionIdentity = torch.nn.L1Loss()
        self.criterionCycle = torch.nn.L1Loss()

        # initialize optimizers; schedulers will be automatically created by function <BaseModel.setup>.
        self.optimizer_G = torch.optim.Adam(itertools.chain(self.netG_A.parameters(), self.netG_B.parameters()),
                                            lr=opt.lr, betas=(opt.beta1, 0.999))
        self.optimizer_D = torch.optim.Adam(itertools.chain(self.netD_A.parameters(), self.netD_B.parameters()),
                                            lr=opt.lr, betas=(opt.beta1, 0.999))
        self.optimizers.append(self.optimizer_G)
        self.optimizers.append(self.optimizer_D)

    def set_input(self, input):
        """Unpack input data from the dataloader and perform necessary pre-processing steps.

        Parameters:
            input (dict): include the data itself and its metadata information.
        """
        self.real_A = input['A'].to(self.device)
        self.real_B = input['B'].to(self.device)
        self.image_paths = input['A_paths']

    def forward(self):
        """Run forward pass; called by both functions <optimize_parameters> and <test>."""
        self.fake_B = self.netG_A(self.real_A)  # G_A(A)
        self.rec_A = self.netG_B(self.fake_B)  # G_B(G_A(A))
        self.fake_A = self.netG_B(self.real_B)  # G_B(B)
        self.rec_B = self.netG_A(self.fake_A)  # G_A(G_B(B))

    def backward_D_basic(self, netD, real, fake):
        """Calculate GAN loss for the discriminator

        Parameters:
            netD (network)      -- the discriminator D
            real (tensor array) -- real images
            fake (tensor array) -- images generated by a generator

        Return the discriminator loss.
        We also call loss_D.backward() to calculate the gradients.
        """
        real_prediction = netD(real)
        target_real = torch.tensor(1.0).expand_as(real_prediction)
        loss_real = self.criterionGAN(real_prediction, target_real)

        fake_prediction = netD(fake)
        target_fake = torch.tensor(0.0).expand_as(fake_prediction)
        loss_fake = self.criterionGAN(fake_prediction, target_fake)

        loss = (loss_real + loss_fake) * 0.5
        loss.backward()
        return loss

    def backward_D_A(self):
        """Calculate GAN loss for discriminator D_A"""
        fake_B = self.fake_B_pool.query(self.fake_B)
        self.loss_D_A = self.backward_D_basic(self.netD_A, self.real_B, fake_B)

    def backward_D_B(self):
        """Calculate GAN loss for discriminator D_B"""
        fake_A = self.fake_A_pool.query(self.fake_A)
        self.loss_D_B = self.backward_D_basic(self.netD_B, self.real_A, fake_A)

    def backward_G(self):
        """Calculate the loss for generators G_A and G_B"""
        lambda_identity = self.opt.lambda_identity
        lambda_A = self.opt.lambda_A
        lambda_B = self.opt.lambda_B

        # G_A should be identity if real_B is fed: ||G_A(B) - B||
        self.identity_A = self.netG_A(self.real_B)
        self.loss_identity_A = self.criterionIdentity(self.identity_A, self.real_B) * lambda_B * lambda_identity
        # G_B should be identity if real_A is fed: ||G_B(A) - A||
        self.identity_B = self.netG_B(self.real_A)
        self.loss_identity_B = self.criterionIdentity(self.identity_B, self.real_A) * lambda_A * lambda_identity

        # GAN loss D_A(G_A(A))
        fake_prediction_D_A = self.netD_A(self.fake_B)
        target_fake_A = torch.tensor(1.0).expand_as(fake_prediction_D_A)
        self.loss_G_A = self.criterionGAN(fake_prediction_D_A, target_fake_A)

        # GAN loss D_B(G_B(B))
        fake_prediction_D_B = self.netD_B(self.fake_A)
        target_fake_B = torch.tensor(1.0).expand_as(fake_prediction_D_B)
        self.loss_G_B = self.criterionGAN(fake_prediction_D_B, target_fake_B)

        # Forward cycle loss || G_B(G_A(A)) - A||
        self.loss_cycle_A = self.criterionCycle(self.rec_A, self.real_A) * lambda_A

        # Backward cycle loss || G_A(G_B(B)) - B||
        self.loss_cycle_B = self.criterionCycle(self.rec_B, self.real_B) * lambda_B

        # combined loss and calculate gradients
        self.loss_G = self.loss_G_A + self.loss_G_B + self.loss_cycle_A + self.loss_cycle_B + self.loss_identity_A + self.loss_identity_B
        self.loss_G.backward()

    def optimize_parameters(self):
        """Calculate losses, gradients, and update network weights; called in every training iteration"""
        # compute fake images and reconstruction images.
        self.forward()

        # G_A and G_B
        self.set_requires_grad([self.netD_A, self.netD_B], False)
        self.optimizer_G.zero_grad()
        self.backward_G()
        self.optimizer_G.step()

        # D_A and D_B
        self.set_requires_grad([self.netD_A, self.netD_B], True)
        self.optimizer_D.zero_grad()
        self.backward_D_A()
        self.backward_D_B()
        self.optimizer_D.step()
